{
	mandatory: {"MergeSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of MergeSort is n log n."
	priority: "5"
}
{
	mandatory: {"MergeSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of MergeSort is n due to the temporary arrays needed before merging."
	priority: "5"
}
{
	mandatory: {"MergeSort", "complexity"}
	optionnal:
	answer: "MergeSort has a time complexity of n log n and a space complexity of n due to the temporary arrays needed before merging."
	priority: "1"
}
{
	mandatory: {"QuickSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of QuickSort is n log n in average case. In the worst case it is n squared though."
	priority: "5"
}
{
	mandatory: {"QuickSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of QuickSort is log n in average. In the worst case it should still be log n using Sedgewick's trick."
	priority: "5"
}
{
	mandatory: {"QuickSort", "complexity"}
	optionnal:
	answer: "QuickSort has a time complexity of n log n and a space complexity of log n in average."
	priority: "1"
}
{
	mandatory: {"InsertionSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of InsertionSort is n squared."
	priority: "5"
}
{
	mandatory: {"InsertionSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of InsertionSort is 1."
	priority: "5"
}
{
	mandatory: {"InsertionSort", "complexity"}
	optionnal:
	answer: "InsertionSort has a time complexity of n squared and a space complexity of 1."
	priority: "1"
}
{
	mandatory: {"SelectionSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of SelectionSort is n squared."
	priority: "5"
}
{
	mandatory: {"SelectionSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of SelectionSort is 1."
	priority: "5"
}
{
	mandatory: {"SelectionSort", "complexity"}
	optionnal:
	answer: "SelectionSort has a time complexity of n squared and a space complexity of 1."
	priority: "1"
}
{
	mandatory: {"BubbleSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of BubbleSort is n squared."
	priority: "5"
}
{
	mandatory: {"BubbleSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of BubbleSort is 1."
	priority: "5"
}
{
	mandatory: {"BubbleSort", "complexity"}
	optionnal:
	answer: "BubbleSort has a time complexity of n squared and a space complexity of 1."
	priority: "1"
}
{
	mandatory: {"HeapSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of HeapSort is n log n."
	priority: "5"
}
{
	mandatory: {"HeapSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of HeapSort is 1 if an iterative heapify is used."
	priority: "5"
}
{
	mandatory: {"HeapSort", "complexity"}
	optionnal:
	answer: "HeapSort has a time complexity of n log n and a space complexity of 1."
	priority: "1"
}
{
	mandatory: {"RadixSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of RadixSort is n times k where n is the number of elements and k is the number of maximum size of an element."
	priority: "5"
}
{
	mandatory: {"RadixSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of RadixSort is n plus k where n is the number of elements and k is the number of maximum size of an element."
	priority: "5"
}
{
	mandatory: {"RadixSort", "complexity"}
	optionnal:
	answer: "RadixSort has a time complexity of n times k and a space complexity of n plus k where n is the number of elements and k is the number of maximum size of an element."
	priority: "1"
}
{
	mandatory: {"CountingSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of CountingSort is n plus k where n is the number of elements and k is the number of different elements."
	priority: "5"
}
{
	mandatory: {"CountingSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of CountingSort k where k is the number of different elements."
	priority: "5"
}
{
	mandatory: {"CountingSort", "complexity"}
	optionnal:
	answer: "CountingSort has a time complexity of n plus k and a space complexity of k where n is the number of elements and k is the number of different elements."
	priority: "1"
}
{
	mandatory: {"ExternalSort", "time", "complexity"}
	optionnal:
	answer: "The time complexity of ExternalSort is n log n."
	priority: "5"
}
{
	mandatory: {"ExternalSort", "space", "complexity"}
	optionnal:
	answer: "The space complexity of ExternalSort is 1."
	priority: "5"
}
{
	mandatory: {"ExternalSort", "complexity"}
	optionnal:
	answer: "ExternalSort has a time complexity of n log n and a space complexity of 1."
	priority: "1"
}
{
	mandatory: {"BucketSort", "time", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "5"
}
{
	mandatory: {"BucketSort", "space", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "5"
}
{
	mandatory: {"BucketSort", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "1"
}
{
	mandatory: {"ShellSort", "time", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "5"
}
{
	mandatory: {"ShellSort", "space", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "5"
}
{
	mandatory: {"ShellSort", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "1"
}
{
	mandatory: {"CombSort", "time", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "5"
}
{
	mandatory: {"CombSort", "space", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "5"
}
{
	mandatory: {"CombSort", "complexity"}
	optionnal:
	answer: "I have not learned this algorithm yet."
	priority: "1"
}